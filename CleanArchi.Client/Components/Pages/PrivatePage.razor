@page "/private-page"
@attribute [Authorize]
@using System.Security.Claims
@using Blazor.QrCodeGen
@using CleanArchi.Client.Identity
@using System.Drawing
@inject IAccountManagement Acct

<PageTitle>Private Page</PageTitle>

<h1>Private Page</h1>

<AuthorizeView>
    <p>Hello, @context.User.Identity?.Name! You're authenticated, so you can see this page that shows your claims.</p>
</AuthorizeView>

<h2>Claims</h2>

@if (claims.Count() > 0)
{
    <ul>
        @foreach (var claim in claims)
        {
            <li><b>@claim.Type:</b> @claim.Value</li>
        }
    </ul>
}

<h2>Enable 2FA Authentication</h2>
<center>
    Scannez le QrCode dans votre authentication App  
    <QrCode CanvasId="AnyId" Text="@QrKey"  />
    <b>ET</b><br />
    Encodez le code fourni pour activer la double authentification :<br />
    <InputText DisplayName="Auth Code" @bind-Value="@AuthCode"></InputText>
    <button @onclick="Enable2FA">Envoyer</button>
</center>
 
@code {

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string QrKey="empty";
    private string AuthCode = "";
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthState == null)
        {
            return;
        }

        AuthenticationState authState = await AuthState;
        claims = authState.User.Claims;
        GetData2FA();
    }

    private async void Enable2FA()
    {
        await Acct.Enable2FA(AuthCode);
    }

    private async void GetData2FA()
    {
        string result = await Acct.GetData2FA();
        if (AuthState == null)
        {
            return;
        }
        AuthenticationState authState = await AuthState;
        string? email = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        string qrstring = GenerateQrCodeUri("otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6", email??"", result);
        QrKey = qrstring; 
        StateHasChanged();
    }

    private string GenerateQrCodeUri(string AuthenticatorUriFormat,string email, string unformattedKey)
    {
        return string.Format(
             AuthenticatorUriFormat,
             "CleanArchi.local.dev",
             email,
            unformattedKey);
    }
}